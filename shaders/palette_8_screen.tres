[gd_resource type="ShaderMaterial" load_steps=3 format=2]

[ext_resource path="res://assets/palette.png" type="Texture" id=1]

[sub_resource type="Shader" id=9]
code = "shader_type canvas_item;

uniform sampler2D color_palette;
uniform float color_blend = 0.0;
uniform float pixel_size = 4.0;

float rand(vec2 co) {
    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

void fragment() {
    // pixelize screen
    float pixsize = float(pixel_size);
	vec2 screen_size = vec2(textureSize(SCREEN_TEXTURE, 0));
	vec2 screen_ratio = pixsize / screen_size;
	//vec2 pixel_uv = (floor(SCREEN_UV / screen_ratio) * screen_ratio) + (screen_ratio / 2.0);
    vec2 pixel_uv = (floor(SCREEN_UV / screen_ratio) * screen_ratio);
	COLOR = textureLod(SCREEN_TEXTURE, pixel_uv, 0.0);
        
    // vignette
    float center_len = length(UV - vec2(0.5));
    COLOR = mix(COLOR, vec4(vec3(0.0), 1.0), pow(center_len, 5));
     
    // noise
    //COLOR = mix(COLOR, vec4(vec3(rand(pixel_uv + rand(vec2(TIME)))), 1.0), 0.03);
    float n = abs(rand(pixel_uv + rand(vec2(floor(TIME * 10.0)))));
    n = clamp(n, 0.0, 1.0);
    COLOR = mix(COLOR, COLOR - vec4(vec3(n), 0.0), 0.015);
       
    // use color palette
    float u = floor(COLOR.g * 8.0) / 8.0 + (1.0 / 16.0);
    float v = 0.0; // selects which row of the palette to use

    vec4 palette_color = texture(color_palette, vec2(u, v));
    COLOR = vec4(palette_color.rgb, COLOR.a);

}"

[resource]
shader = SubResource( 9 )
shader_param/color_blend = 0.5
shader_param/pixel_size = 4.0
shader_param/color_palette = ExtResource( 1 )
