[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float width : hint_range(0.0, 30.0);
uniform vec4 color : hint_color;
uniform vec4 outline_color : hint_color;

void vertex() {
// Output:0

}

void fragment() {
	//float size = width;
	float size = width * 1.0 / float(textureSize(TEXTURE, 0).x);
	
	vec4 sprite_color = texture(TEXTURE, UV);
	float alpha = sprite_color.a * -8.0;
	if(
		sprite_color.a == 0.0 && (
			texture(TEXTURE, UV + vec2(size, 0)).a > 0.0 || 
			texture(TEXTURE, UV + vec2(-size, 0)).a > 0.0 ||
			texture(TEXTURE, UV + vec2(0, size)).a > 0.0 ||
			texture(TEXTURE, UV + vec2(0, -size)).a > 0.0
		)
	) {
		COLOR = outline_color;
	}
	else {
		COLOR = color;
	}
	//COLOR = vec4(UV, 0.5, 1.0);
	//vec4 final_color = mix(sprite_color, outline_color, alpha);
	//COLOR = final_color;
// Output:0
	//COLOR.rgb = color.rgb;
	//COLOR.a = color.a;

}

void light() {
// Output:0

}
"

[resource]
shader = SubResource( 1 )
shader_param/width = 4.0
shader_param/color = Color( 0.231373, 0.231373, 0.231373, 1 )
shader_param/outline_color = Color( 1, 1, 1, 1 )
