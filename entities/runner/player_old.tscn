[gd_scene load_steps=91 format=2]

[ext_resource path="res://entities/runner/moves/normal_forward.tscn" type="PackedScene" id=1]
[ext_resource path="res://entities/runner/runner_model.tscn" type="PackedScene" id=2]
[ext_resource path="res://entities/runner/moves/special_heavy.tscn" type="PackedScene" id=3]
[ext_resource path="res://entities/runner/moves/normal_up.tscn" type="PackedScene" id=4]
[ext_resource path="res://entities/runner/moves/normal_down.tscn" type="PackedScene" id=5]
[ext_resource path="res://entities/ecb.tscn" type="PackedScene" id=6]
[ext_resource path="res://shaders/grayscale.gdshader" type="Shader" id=7]
[ext_resource path="res://entities/runner/animated_sprite.gd" type="Script" id=8]
[ext_resource path="res://assets/sprites/falcon.png" type="Texture2D" id=9]
[ext_resource path="res://assets/sprites/PS4.png" type="Texture2D" id=10]
[ext_resource path="res://entities/runner/player_old.gd" type="Script" id=11]

[sub_resource type="ShaderMaterial" id=2]
shader = ExtResource( 7 )

[sub_resource type="AtlasTexture" id=3]
atlas = ExtResource( 10 )
region = Rect2( 56, 0, 14, 14 )

[sub_resource type="AtlasTexture" id=12]
atlas = ExtResource( 9 )
region = Rect2( 0, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=13]
atlas = ExtResource( 9 )
region = Rect2( 32, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=14]
atlas = ExtResource( 9 )
region = Rect2( 64, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=15]
atlas = ExtResource( 9 )
region = Rect2( 96, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=16]
atlas = ExtResource( 9 )
region = Rect2( 128, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=17]
atlas = ExtResource( 9 )
region = Rect2( 160, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=18]
atlas = ExtResource( 9 )
region = Rect2( 192, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=19]
atlas = ExtResource( 9 )
region = Rect2( 224, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=20]
atlas = ExtResource( 9 )
region = Rect2( 256, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=21]
atlas = ExtResource( 9 )
region = Rect2( 288, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=22]
atlas = ExtResource( 9 )
region = Rect2( 320, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=23]
atlas = ExtResource( 9 )
region = Rect2( 352, 32, 32, 32 )

[sub_resource type="AtlasTexture" id=24]
atlas = ExtResource( 9 )
region = Rect2( 0, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=25]
atlas = ExtResource( 9 )
region = Rect2( 32, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=26]
atlas = ExtResource( 9 )
region = Rect2( 64, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=27]
atlas = ExtResource( 9 )
region = Rect2( 96, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=28]
atlas = ExtResource( 9 )
region = Rect2( 128, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=29]
atlas = ExtResource( 9 )
region = Rect2( 160, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=30]
atlas = ExtResource( 9 )
region = Rect2( 192, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=31]
atlas = ExtResource( 9 )
region = Rect2( 224, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=32]
atlas = ExtResource( 9 )
region = Rect2( 256, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=33]
atlas = ExtResource( 9 )
region = Rect2( 288, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=34]
atlas = ExtResource( 9 )
region = Rect2( 320, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=35]
atlas = ExtResource( 9 )
region = Rect2( 352, 64, 32, 32 )

[sub_resource type="AtlasTexture" id=36]
atlas = ExtResource( 9 )
region = Rect2( 0, 96, 32, 32 )

[sub_resource type="AtlasTexture" id=56]
atlas = ExtResource( 9 )
region = Rect2( 256, 256, 64, 64 )

[sub_resource type="AtlasTexture" id=57]
atlas = ExtResource( 9 )
region = Rect2( 320, 256, 64, 64 )

[sub_resource type="AtlasTexture" id=58]
atlas = ExtResource( 9 )
region = Rect2( 0, 320, 64, 64 )

[sub_resource type="AtlasTexture" id=59]
atlas = ExtResource( 9 )
region = Rect2( 64, 320, 64, 64 )

[sub_resource type="AtlasTexture" id=60]
atlas = ExtResource( 9 )
region = Rect2( 128, 320, 64, 64 )

[sub_resource type="AtlasTexture" id=61]
atlas = ExtResource( 9 )
region = Rect2( 192, 320, 64, 64 )

[sub_resource type="AtlasTexture" id=62]
atlas = ExtResource( 9 )
region = Rect2( 256, 320, 64, 64 )

[sub_resource type="AtlasTexture" id=63]
atlas = ExtResource( 9 )
region = Rect2( 320, 320, 64, 64 )

[sub_resource type="AtlasTexture" id=64]
atlas = ExtResource( 9 )
region = Rect2( 128, 384, 64, 64 )

[sub_resource type="AtlasTexture" id=65]
atlas = ExtResource( 9 )
region = Rect2( 192, 384, 64, 64 )

[sub_resource type="AtlasTexture" id=66]
atlas = ExtResource( 9 )
region = Rect2( 256, 384, 64, 64 )

[sub_resource type="AtlasTexture" id=67]
atlas = ExtResource( 9 )
region = Rect2( 320, 384, 64, 64 )

[sub_resource type="AtlasTexture" id=68]
atlas = ExtResource( 9 )
region = Rect2( 0, 448, 64, 64 )

[sub_resource type="AtlasTexture" id=69]
atlas = ExtResource( 9 )
region = Rect2( 64, 448, 64, 64 )

[sub_resource type="AtlasTexture" id=70]
atlas = ExtResource( 9 )
region = Rect2( 128, 448, 64, 64 )

[sub_resource type="AtlasTexture" id=71]
atlas = ExtResource( 9 )
region = Rect2( 192, 448, 64, 64 )

[sub_resource type="AtlasTexture" id=77]
atlas = ExtResource( 9 )
region = Rect2( 0, 576, 64, 64 )

[sub_resource type="AtlasTexture" id=78]
atlas = ExtResource( 9 )
region = Rect2( 64, 576, 64, 64 )

[sub_resource type="AtlasTexture" id=79]
atlas = ExtResource( 9 )
region = Rect2( 128, 576, 64, 64 )

[sub_resource type="AtlasTexture" id=80]
atlas = ExtResource( 9 )
region = Rect2( 192, 576, 64, 64 )

[sub_resource type="AtlasTexture" id=81]
atlas = ExtResource( 9 )
region = Rect2( 256, 576, 64, 64 )

[sub_resource type="AtlasTexture" id=82]
atlas = ExtResource( 9 )
region = Rect2( 320, 576, 64, 64 )

[sub_resource type="AtlasTexture" id=83]
atlas = ExtResource( 9 )
region = Rect2( 0, 640, 64, 64 )

[sub_resource type="AtlasTexture" id=84]
atlas = ExtResource( 9 )
region = Rect2( 64, 640, 64, 64 )

[sub_resource type="AtlasTexture" id=85]
atlas = ExtResource( 9 )
region = Rect2( 128, 640, 64, 64 )

[sub_resource type="AtlasTexture" id=86]
atlas = ExtResource( 9 )
region = Rect2( 192, 640, 64, 64 )

[sub_resource type="AtlasTexture" id=87]
atlas = ExtResource( 9 )
region = Rect2( 256, 640, 64, 64 )

[sub_resource type="AtlasTexture" id=88]
atlas = ExtResource( 9 )
region = Rect2( 320, 640, 64, 64 )

[sub_resource type="AtlasTexture" id=37]
atlas = ExtResource( 9 )
region = Rect2( 0, 128, 32, 64 )

[sub_resource type="AtlasTexture" id=39]
atlas = ExtResource( 9 )
region = Rect2( 64, 128, 32, 64 )

[sub_resource type="AtlasTexture" id=41]
atlas = ExtResource( 9 )
region = Rect2( 128, 128, 32, 64 )

[sub_resource type="AtlasTexture" id=44]
atlas = ExtResource( 9 )
region = Rect2( 224, 128, 32, 64 )

[sub_resource type="AtlasTexture" id=45]
atlas = ExtResource( 9 )
region = Rect2( 256, 128, 32, 64 )

[sub_resource type="AtlasTexture" id=46]
atlas = ExtResource( 9 )
region = Rect2( 288, 128, 32, 64 )

[sub_resource type="AtlasTexture" id=47]
atlas = ExtResource( 9 )
region = Rect2( 320, 128, 32, 64 )

[sub_resource type="AtlasTexture" id=48]
atlas = ExtResource( 9 )
region = Rect2( 352, 128, 32, 64 )

[sub_resource type="AtlasTexture" id=49]
atlas = ExtResource( 9 )
region = Rect2( 0, 192, 32, 64 )

[sub_resource type="AtlasTexture" id=50]
atlas = ExtResource( 9 )
region = Rect2( 32, 192, 32, 64 )

[sub_resource type="AtlasTexture" id=51]
atlas = ExtResource( 9 )
region = Rect2( 64, 192, 32, 64 )

[sub_resource type="AtlasTexture" id=72]
atlas = ExtResource( 9 )
region = Rect2( 0, 0, 64, 32 )

[sub_resource type="AtlasTexture" id=73]
atlas = ExtResource( 9 )
region = Rect2( 64, 0, 64, 32 )

[sub_resource type="AtlasTexture" id=74]
atlas = ExtResource( 9 )
region = Rect2( 128, 0, 64, 32 )

[sub_resource type="AtlasTexture" id=75]
atlas = ExtResource( 9 )
region = Rect2( 192, 0, 64, 32 )

[sub_resource type="AtlasTexture" id=76]
atlas = ExtResource( 9 )
region = Rect2( 256, 0, 64, 32 )

[sub_resource type="SpriteFrames" id=11]
animations = [ {
"frames": [ SubResource( 12 ), SubResource( 13 ), SubResource( 14 ), SubResource( 15 ), SubResource( 16 ), SubResource( 17 ), SubResource( 18 ), SubResource( 19 ), SubResource( 20 ), SubResource( 21 ), SubResource( 22 ), SubResource( 23 ), SubResource( 24 ), SubResource( 25 ), SubResource( 26 ), SubResource( 27 ), SubResource( 28 ), SubResource( 29 ), SubResource( 30 ), SubResource( 31 ), SubResource( 32 ), SubResource( 33 ), SubResource( 34 ), SubResource( 35 ), SubResource( 36 ) ],
"loop": true,
"name": "idle",
"speed": 25.0
}, {
"frames": [ SubResource( 56 ), SubResource( 57 ), SubResource( 58 ), SubResource( 59 ), SubResource( 60 ), SubResource( 61 ), SubResource( 62 ), SubResource( 63 ) ],
"loop": false,
"name": "attack",
"speed": 15.0
}, {
"frames": [ SubResource( 64 ), SubResource( 65 ), SubResource( 66 ), SubResource( 67 ), SubResource( 68 ), SubResource( 69 ), SubResource( 70 ), SubResource( 71 ) ],
"loop": false,
"name": "u_attack",
"speed": 25.0
}, {
"frames": [ SubResource( 77 ), SubResource( 78 ), SubResource( 79 ), SubResource( 80 ), SubResource( 81 ), SubResource( 82 ), SubResource( 83 ), SubResource( 84 ), SubResource( 85 ), SubResource( 86 ), SubResource( 87 ), SubResource( 88 ) ],
"loop": false,
"name": "d_attack",
"speed": 25.0
}, {
"frames": [ SubResource( 37 ), SubResource( 39 ), SubResource( 41 ), SubResource( 44 ), SubResource( 45 ), SubResource( 46 ), SubResource( 47 ), SubResource( 48 ), SubResource( 49 ), SubResource( 50 ), SubResource( 51 ) ],
"loop": false,
"name": "airborne",
"speed": 25.0
}, {
"frames": [ SubResource( 72 ), SubResource( 73 ), SubResource( 74 ), SubResource( 75 ), SubResource( 76 ) ],
"loop": true,
"name": "running",
"speed": 15.0
} ]

[sub_resource type="RectangleShape2D" id=5]
extents = Vector2( 6, 18 )

[sub_resource type="RectangleShape2D" id=89]
resource_local_to_scene = true
extents = Vector2( 9, 2 )

[sub_resource type="RectangleShape2D" id=90]
resource_local_to_scene = true
extents = Vector2( 6, 5.5 )

[sub_resource type="GDScript" id=94]
script/source = "#===============================================================================
# Move
#
# Contains scripting for a move (i.e. attacks, specials).
# This script contains:
# - animation
# - frame data
#===============================================================================

extends Node2D
@tool

signal move_started
signal move_hit
signal move_finished
signal move_stopped  # called when the move ended manually

# reference to the runner containing this move
@onready var runner = $\"../..\"

# if true, this move is currently playing
@export var playing: bool = false
@export var tick = 0

# if true, flip this move horizontally
var flipped = false :
	get:
		return flipped # TODOConverter40 Non existent get function 
	set(mod_value):
		mod_value  # TODOConverter40 Copy here content of set_flipped

# if true, this move hit something
var hit_detected = false

# move properties
# =================================

@export (int) var move_length = 30
@export (int) var move_damage = 1

@export (Array, Dictionary) var move_hitboxes = [
    {
        \"start\": 0,
        \"end\": 4,
    }
]

# how long to put the player in hitstun checked hit (in frames, from time of hit)
@export (int) var hitlag_on_hit = 6

# the animation to play when performing this move
@export (String) var animation = \"attack\"

# if true, stops the player's vertical velocity at the start
@export var disable_gravity_on_start = false

# if greater than 0, the amount of ticks gravity will be disabled checked hit
@export var disable_gravity_on_hit = 18


func _ready():
    runner = $\"../..\"
    runner.connect(\"stun_start\",Callable(self,\"pause\"))
    runner.connect(\"stun_end\",Callable(self,\"resume\"))

    for hitbox in get_children(): if hitbox is Area2D:
        # emit \"move_hit\" if anything enters a hitbox
        hitbox.connect(\"area_shape_entered\",Callable(self,\"on_hitbox_entered\").bind(hitbox))


func start():
    print(\"[move] %s: started\" % name)
    # reset flags
    tick = 0
    playing = true
    hit_detected = false

    # play move animation
    $sprite.visible = true
    $sprite.frame = 0  # restart animation

    runner.play_animation(animation)

    # flip if directed to the left
    if runner:
        set_flipped(runner.facing == Direction.LEFT)
    
    resume()


func pause():
    playing = false
    $sprite.stop()


func resume():
    playing = true
    $sprite.play()


func stop(forced = true):
    if playing:
        tick = 0
        playing = false
        $sprite.visible = false
        pause()
        if forced:
            # print(\"[move] %s: finished\" % name)
            emit_signal(\"move_finished\")
        else:
            # print(\"[move] %s: stopped\" % name)
            emit_signal(\"move_stopped\")
        notify_property_list_changed()


func move_update(delta):

    if tick > move_length:
        stop(false)

    elif playing:

        # print(\"[move] %s: frame %s\" % [name, frame])

        # disable gravity at start of move
        if disable_gravity_on_start and tick == 0:
            if runner:
                runner.velocity.y = 0

        for i in range(len(move_hitboxes)):

            var hitbox = get_node(String(i))

            # enable hitbox if inside window
            if tick == move_hitboxes[i][\"start\"]:
                # print(\"[move] %s: enabling hitbox\" % name)
                hitbox.monitoring = true
                hitbox.get_node(\"collision\").disabled = false
                hitbox.modulate = Color(4.0, 0.0, 0.0)

            # disable hitbox if outside window
            elif tick == move_hitboxes[i][\"end\"] + 1:
                # print(\"[move] %s: disabling hitbox\" % name)
                hitbox.monitoring = false
                hitbox.get_node(\"collision\").disabled = true
                hitbox.modulate = Color(1.0, 1.0, 1.0)

            $sprite.modulate.a = 1 - ((tick - 12) / float(move_length))

        tick += 1
        notify_property_list_changed()

func _physics_process(delta):
    if Engine.editor_hint:
        move_update(delta)

# Flip the move horizontally.
func set_flipped(flip):
    flipped = flip
    if flipped:
        scale = Vector2(-1, 1)
    else:
        scale = Vector2(1, 1)

# called when an object enters a hitbox
#
# target: the object that was hit
# hitbox: the collision of the hitbox that was triggered
func on_hitbox_entered(area_id, target: Area2D, target_shape_id, hitbox_shape_id, hitbox: Area2D):
    if(hitbox.monitoring and playing and target is Enemy and (target.health > 0 or runner.ignore_enemy_hp)):
        # print(\"[move] %s: hitbox %s hit enemy (%s)\" % [name, hitbox.name, hitbox_col.disabled])

        # compute contact points
        var target_shape = Util.get_shape(target, target_shape_id)
        var hitbox_shape = Util.get_shape(hitbox, hitbox_shape_id)
        var contacts = Util.get_collision_contacts(
            target, target_shape,
            hitbox, hitbox_shape
        )

        emit_signal(\"move_hit\")
        runner.hit(target, move_damage, contacts, hitlag_on_hit, disable_gravity_on_hit)
        hit_detected = true
"

[sub_resource type="GDScript" id=93]
script/source = "#===============================================================================
# Move
#
# Contains scripting for a move (i.e. attacks, specials).
# This script contains:
# - animation
# - frame data
#===============================================================================

extends Node2D
@tool

signal move_started
signal move_hit
signal move_finished
signal move_stopped  # called when the move ended manually

# reference to the runner containing this move
@onready var runner = $\"../..\"

# if true, this move is currently playing
@export var playing: bool = false
@export var tick = 0

# if true, flip this move horizontally
var flipped = false :
	get:
		return flipped # TODOConverter40 Non existent get function 
	set(mod_value):
		mod_value  # TODOConverter40 Copy here content of set_flipped

# if true, this move hit something
var hit_detected = false

# move properties
# =================================

@export (int) var move_length = 30
@export (int) var move_damage = 1

@export (Array, Dictionary) var move_hitboxes = [
    {
        \"start\": 0,
        \"end\": 4,
    }
]

# how long to put the player in hitstun checked hit (in frames, from time of hit)
@export (int) var hitlag_on_hit = 6

# the animation to play when performing this move
@export (String) var animation = \"attack\"

# if true, stops the player's vertical velocity at the start
@export var disable_gravity_on_start = false

# if greater than 0, the amount of ticks gravity will be disabled checked hit
@export var disable_gravity_on_hit = 18


func _ready():
    runner = $\"../..\"
    runner.connect(\"stun_start\",Callable(self,\"pause\"))
    runner.connect(\"stun_end\",Callable(self,\"resume\"))

    for hitbox in get_children(): if hitbox is Area2D:
        # emit \"move_hit\" if anything enters a hitbox
        hitbox.connect(\"area_shape_entered\",Callable(self,\"on_hitbox_entered\").bind(hitbox))


func start():
    print(\"[move] %s: started\" % name)
    # reset flags
    tick = 0
    playing = true
    hit_detected = false

    # play move animation
    $sprite.visible = true
    $sprite.frame = 0  # restart animation

    runner.play_animation(animation)

    # flip if directed to the left
    if runner:
        set_flipped(runner.facing == Direction.LEFT)
    
    resume()


func pause():
    playing = false
    $sprite.stop()


func resume():
    playing = true
    $sprite.play()


func stop(forced = true):
    if playing:
        tick = 0
        playing = false
        $sprite.visible = false
        pause()
        if forced:
            # print(\"[move] %s: finished\" % name)
            emit_signal(\"move_finished\")
        else:
            # print(\"[move] %s: stopped\" % name)
            emit_signal(\"move_stopped\")
        notify_property_list_changed()


func move_update(delta):

    if tick > move_length:
        stop(false)

    elif playing:

        # print(\"[move] %s: frame %s\" % [name, frame])

        # disable gravity at start of move
        if disable_gravity_on_start and tick == 0:
            if runner:
                runner.velocity.y = 0

        for i in range(len(move_hitboxes)):

            var hitbox = get_node(String(i))

            # enable hitbox if inside window
            if tick == move_hitboxes[i][\"start\"]:
                # print(\"[move] %s: enabling hitbox\" % name)
                hitbox.monitoring = true
                hitbox.get_node(\"collision\").disabled = false
                hitbox.modulate = Color(4.0, 0.0, 0.0)

            # disable hitbox if outside window
            elif tick == move_hitboxes[i][\"end\"] + 1:
                # print(\"[move] %s: disabling hitbox\" % name)
                hitbox.monitoring = false
                hitbox.get_node(\"collision\").disabled = true
                hitbox.modulate = Color(1.0, 1.0, 1.0)

            $sprite.modulate.a = 1 - ((tick - 12) / float(move_length))

        tick += 1
        notify_property_list_changed()

func _physics_process(delta):
    if Engine.editor_hint:
        move_update(delta)

# Flip the move horizontally.
func set_flipped(flip):
    flipped = flip
    if flipped:
        scale = Vector2(-1, 1)
    else:
        scale = Vector2(1, 1)

# called when an object enters a hitbox
#
# target: the object that was hit
# hitbox: the collision of the hitbox that was triggered
func on_hitbox_entered(area_id, target: Area2D, target_shape_id, hitbox_shape_id, hitbox: Area2D):
    if(hitbox.monitoring and playing and target is Enemy and (target.health > 0 or runner.ignore_enemy_hp)):
        # print(\"[move] %s: hitbox %s hit enemy (%s)\" % [name, hitbox.name, hitbox_col.disabled])

        # compute contact points
        var target_shape = Util.get_shape(target, target_shape_id)
        var hitbox_shape = Util.get_shape(hitbox, hitbox_shape_id)
        var contacts = Util.get_collision_contacts(
            target, target_shape,
            hitbox, hitbox_shape
        )

        emit_signal(\"move_hit\")
        runner.hit(target, move_damage, contacts, hitlag_on_hit, disable_gravity_on_hit)
        hit_detected = true
"

[sub_resource type="GDScript" id=91]
script/source = "#===============================================================================
# Move
#
# Contains scripting for a move (i.e. attacks, specials).
# This script contains:
# - animation
# - frame data
#===============================================================================

extends Node2D
@tool

signal move_started
signal move_hit
signal move_finished
signal move_stopped  # called when the move ended manually

# reference to the runner containing this move
@onready var runner = $\"../..\"

# if true, this move is currently playing
@export var playing: bool = false
@export var tick = 0

# if true, flip this move horizontally
var flipped = false :
	get:
		return flipped # TODOConverter40 Non existent get function 
	set(mod_value):
		mod_value  # TODOConverter40 Copy here content of set_flipped

# if true, this move hit something
var hit_detected = false

# move properties
# =================================

@export (int) var move_length = 30
@export (int) var move_damage = 1

@export (Array, Dictionary) var move_hitboxes = [
    {
        \"start\": 0,
        \"end\": 4,
    }
]

# how long to put the player in hitstun checked hit (in frames, from time of hit)
@export (int) var hitlag_on_hit = 6

# the animation to play when performing this move
@export (String) var animation = \"attack\"

# if true, stops the player's vertical velocity at the start
@export var disable_gravity_on_start = false

# if greater than 0, the amount of ticks gravity will be disabled checked hit
@export var disable_gravity_on_hit = 18


func _ready():
    runner = $\"../..\"
    runner.connect(\"stun_start\",Callable(self,\"pause\"))
    runner.connect(\"stun_end\",Callable(self,\"resume\"))

    for hitbox in get_children(): if hitbox is Area2D:
        # emit \"move_hit\" if anything enters a hitbox
        hitbox.connect(\"area_shape_entered\",Callable(self,\"on_hitbox_entered\").bind(hitbox))


func start():
    print(\"[move] %s: started\" % name)
    # reset flags
    tick = 0
    playing = true
    hit_detected = false

    # play move animation
    $sprite.visible = true
    $sprite.frame = 0  # restart animation

    runner.play_animation(animation)

    # flip if directed to the left
    if runner:
        set_flipped(runner.facing == Direction.LEFT)
    
    resume()


func pause():
    playing = false
    $sprite.stop()


func resume():
    playing = true
    $sprite.play()


func stop(forced = true):
    if playing:
        tick = 0
        playing = false
        $sprite.visible = false
        pause()
        if forced:
            # print(\"[move] %s: finished\" % name)
            emit_signal(\"move_finished\")
        else:
            # print(\"[move] %s: stopped\" % name)
            emit_signal(\"move_stopped\")
        notify_property_list_changed()


func move_update(delta):

    if tick > move_length:
        stop(false)

    elif playing:

        # print(\"[move] %s: frame %s\" % [name, frame])

        # disable gravity at start of move
        if disable_gravity_on_start and tick == 0:
            if runner:
                runner.velocity.y = 0

        for i in range(len(move_hitboxes)):

            var hitbox = get_node(String(i))

            # enable hitbox if inside window
            if tick == move_hitboxes[i][\"start\"]:
                # print(\"[move] %s: enabling hitbox\" % name)
                hitbox.monitoring = true
                hitbox.get_node(\"collision\").disabled = false
                hitbox.modulate = Color(4.0, 0.0, 0.0)

            # disable hitbox if outside window
            elif tick == move_hitboxes[i][\"end\"] + 1:
                # print(\"[move] %s: disabling hitbox\" % name)
                hitbox.monitoring = false
                hitbox.get_node(\"collision\").disabled = true
                hitbox.modulate = Color(1.0, 1.0, 1.0)

            $sprite.modulate.a = 1 - ((tick - 12) / float(move_length))

        tick += 1
        notify_property_list_changed()

func _physics_process(delta):
    if Engine.editor_hint:
        move_update(delta)

# Flip the move horizontally.
func set_flipped(flip):
    flipped = flip
    if flipped:
        scale = Vector2(-1, 1)
    else:
        scale = Vector2(1, 1)

# called when an object enters a hitbox
#
# target: the object that was hit
# hitbox: the collision of the hitbox that was triggered
func on_hitbox_entered(area_id, target: Area2D, target_shape_id, hitbox_shape_id, hitbox: Area2D):
    if(hitbox.monitoring and playing and target is Enemy and (target.health > 0 or runner.ignore_enemy_hp)):
        # print(\"[move] %s: hitbox %s hit enemy (%s)\" % [name, hitbox.name, hitbox_col.disabled])

        # compute contact points
        var target_shape = Util.get_shape(target, target_shape_id)
        var hitbox_shape = Util.get_shape(hitbox, hitbox_shape_id)
        var contacts = Util.get_collision_contacts(
            target, target_shape,
            hitbox, hitbox_shape
        )

        emit_signal(\"move_hit\")
        runner.hit(target, move_damage, contacts, hitlag_on_hit, disable_gravity_on_hit)
        hit_detected = true
"

[sub_resource type="GDScript" id=92]
script/source = "#===============================================================================
# Move
#
# Contains scripting for a move (i.e. attacks, specials).
# This script contains:
# - animation
# - frame data
#===============================================================================

extends Node2D
@tool

signal move_started
signal move_hit
signal move_finished
signal move_stopped  # called when the move ended manually

# reference to the runner containing this move
@onready var runner = $\"../..\"

# if true, this move is currently playing
@export var playing: bool = false
@export var tick = 0

# if true, flip this move horizontally
var flipped = false :
	get:
		return flipped # TODOConverter40 Non existent get function 
	set(mod_value):
		mod_value  # TODOConverter40 Copy here content of set_flipped

# if true, this move hit something
var hit_detected = false

# move properties
# =================================

var move_length = 30
var move_damage = 1

var move_hitboxes = [
    {
        \"start\": 0,
        \"end\": 4,
    }
]

# how long to put the player in hitstun checked hit (in frames, from time of hit)
var hitlag_on_hit = 6

# the animation to play when performing this move
var animation = \"attack\"

# if true, stops the player's vertical velocity at the start
var disable_gravity_on_start = false

# if greater than 0, the amount of ticks gravity will be disabled checked hit
var disable_gravity_on_hit = 18


func _ready():
    runner = $\"../..\"
    runner.connect(\"stun_start\",Callable(self,\"pause\"))
    runner.connect(\"stun_end\",Callable(self,\"resume\"))

    for hitbox in get_children(): if hitbox is Area2D:
        # emit \"move_hit\" if anything enters a hitbox
        hitbox.connect(\"area_shape_entered\",Callable(self,\"on_hitbox_entered\").bind(hitbox))


func start():
    print(\"[move] %s: started\" % name)
    # reset flags
    tick = 0
    playing = true
    hit_detected = false

    # play move animation
    $sprite.visible = true
    $sprite.frame = 0  # restart animation

    runner.play_animation(animation)

    # flip if directed to the left
    if runner:
        set_flipped(runner.facing == Direction.LEFT)
    
    resume()


func pause():
    playing = false
    $sprite.stop()


func resume():
    playing = true
    $sprite.play()


func stop(forced = true):
    if playing:
        tick = 0
        playing = false
        $sprite.visible = false
        pause()
        if forced:
            # print(\"[move] %s: finished\" % name)
            emit_signal(\"move_finished\")
        else:
            # print(\"[move] %s: stopped\" % name)
            emit_signal(\"move_stopped\")
        notify_property_list_changed()


func move_update(delta):

    if tick > move_length:
        stop(false)

    elif playing:

        # print(\"[move] %s: frame %s\" % [name, frame])

        # disable gravity at start of move
        if disable_gravity_on_start and tick == 0:
            if runner:
                runner.velocity.y = 0

        for i in range(len(move_hitboxes)):

            var hitbox = get_node(String(i))

            # enable hitbox if inside window
            if tick == move_hitboxes[i][\"start\"]:
                # print(\"[move] %s: enabling hitbox\" % name)
                hitbox.monitoring = true
                hitbox.get_node(\"collision\").disabled = false
                hitbox.modulate = Color(4.0, 0.0, 0.0)

            # disable hitbox if outside window
            elif tick == move_hitboxes[i][\"end\"] + 1:
                # print(\"[move] %s: disabling hitbox\" % name)
                hitbox.monitoring = false
                hitbox.get_node(\"collision\").disabled = true
                hitbox.modulate = Color(1.0, 1.0, 1.0)

            $sprite.modulate.a = 1 - ((tick - 12) / float(move_length))

        tick += 1
        notify_property_list_changed()

func _physics_process(delta):
    if Engine.editor_hint:
        move_update(delta)

# Flip the move horizontally.
func set_flipped(flip):
    flipped = flip
    if flipped:
        scale = Vector2(-1, 1)
    else:
        scale = Vector2(1, 1)

# called when an object enters a hitbox
#
# target: the object that was hit
# hitbox: the collision of the hitbox that was triggered
func on_hitbox_entered(area_id, target: Area2D, target_shape_id, hitbox_shape_id, hitbox: Area2D):
    if(hitbox.monitoring and playing and target is Enemy and (target.health > 0 or runner.ignore_enemy_hp)):
        # print(\"[move] %s: hitbox %s hit enemy (%s)\" % [name, hitbox.name, hitbox_col.disabled])

        # compute contact points
        var target_shape = Util.get_shape(target, target_shape_id)
        var hitbox_shape = Util.get_shape(hitbox, hitbox_shape_id)
        var contacts = Util.get_collision_contacts(
            target, target_shape,
            hitbox, hitbox_shape
        )

        emit_signal(\"move_hit\")
        runner.hit(target, move_damage, contacts, hitlag_on_hit, disable_gravity_on_hit)
        hit_detected = true
"

[node name="player" type="CharacterBody2D"]
z_index = 1
collision_layer = 2
collision_mask = 257
script = ExtResource( 11 )
__meta__ = {
"_edit_horizontal_guides_": [ -192.0, 0.0, -48.0 ],
"_edit_vertical_guides_": [ -64.0, 64.0, -16.0, 16.0 ]
}

[node name="interact_sprite" type="Sprite2D" parent="."]
visible = false
modulate = Color( 0.694118, 0.694118, 0.694118, 1 )
material = SubResource( 2 )
position = Vector2( 8, -76 )
scale = Vector2( 4, 4 )
texture = SubResource( 3 )
region_rect = Rect2( 0, 0, 56, 56 )

[node name="sprite" type="AnimatedSprite2D" parent="."]
visible = false
position = Vector2( 0, -64 )
scale = Vector2( 4, 4 )
z_index = 1
frames = SubResource( 11 )
animation = "idle"
frame = 16
script = ExtResource( 8 )

[node name="ecb" parent="." instance=ExtResource( 6 )]
modulate = Color( 1, 0.890196, 0, 1 )

[node name="hurtbox" type="Area2D" parent="."]
collision_layer = 128
collision_mask = 4

[node name="collision_shape_2d" type="CollisionShape2D" parent="hurtbox"]
position = Vector2( 0, -24 )
shape = SubResource( 5 )

[node name="test_body_bot" type="CharacterBody2D" parent="."]
position = Vector2( 0, -16 )
collision_layer = 0

[node name="collision_shape_2d" type="CollisionShape2D" parent="test_body_bot"]
position = Vector2( 0, 8 )
shape = SubResource( 89 )

[node name="test_body_top" type="CharacterBody2D" parent="."]
position = Vector2( 0, -80 )
collision_layer = 0

[node name="collision_shape_2d" type="CollisionShape2D" parent="test_body_top"]
position = Vector2( 0, 40 )
shape = SubResource( 90 )

[node name="moveset" type="Node2D" parent="."]
visible = false
position = Vector2( 0, -6 )

[node name="special_heavy" parent="moveset" instance=ExtResource( 3 )]
script = SubResource( 94 )
move_hitboxes = [ {
"end": 4,
"start": 0
} ]

[node name="normal_up" parent="moveset" instance=ExtResource( 4 )]
position = Vector2( -8, -10 )
script = SubResource( 93 )
move_hitboxes = [ {
"end": 4,
"start": 0
} ]

[node name="normal_down" parent="moveset" instance=ExtResource( 5 )]
script = SubResource( 91 )
move_hitboxes = [ {
"end": 4,
"start": 0
} ]

[node name="normal_forward" parent="moveset" instance=ExtResource( 1 )]
position = Vector2( 8, -10 )
script = SubResource( 92 )

[node name="viewport_container" type="SubViewportContainer" parent="."]
offset_left = -72.0
offset_top = -96.0
offset_right = 78.0
offset_bottom = 54.0
clip_contents = true
stretch = true
__meta__ = {
"_edit_lock_": true
}

[node name="viewport" type="SubViewport" parent="viewport_container"]
size = Vector2( 150, 150 )
transparent_bg = true
handle_input_locally = false
usage = 3
render_target_update_mode = 3
gui_disable_input = true

[node name="captain" parent="viewport_container/viewport" instance=ExtResource( 2 )]

[editable path="viewport_container/viewport/captain"]
