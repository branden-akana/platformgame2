[gd_resource type="VisualShader" load_steps=11 format=3 uid="uid://dmklax21rtb63"]

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_k8vpi"]
default_input_values = [0, 0.0, 1, 0.0, 2, 0.0, 3, 0.0]

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_c5fvh"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0
function = 14

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_dpe3a"]
op_type = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_mx8i7"]

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_67r6c"]
input_name = "velocity"

[sub_resource type="VisualShaderNodeInput" id="VisualShaderNodeInput_t8mlj"]
input_name = "velocity"

[sub_resource type="VisualShaderNodeVectorFunc" id="VisualShaderNodeVectorFunc_r656h"]
default_input_values = [0, Vector2(0, 0)]
op_type = 0
function = 22

[sub_resource type="VisualShaderNodeVectorCompose" id="VisualShaderNodeVectorCompose_e7w4n"]
op_type = 0

[sub_resource type="VisualShaderNodeVectorDecompose" id="VisualShaderNodeVectorDecompose_ldufy"]

[sub_resource type="VisualShaderNodeVec3Constant" id="VisualShaderNodeVec3Constant_ql3us"]
constant = Vector3(0, 0, 1)

[resource]
code = "shader_type particles;


float __rand_from_seed(inout uint seed) {
	int k;
	int s = int(seed);
	if (s == 0)
	s = 305420679;
	k = s / 127773;
	s = 16807 * (s - k * 127773) - 2836 * k;
	if (s < 0)
		s += 2147483647;
	seed = uint(s);
	return float(seed % uint(65536)) / 65535.0;
}

float __rand_from_seed_m1_p1(inout uint seed) {
	return __rand_from_seed(seed) * 2.0 - 1.0;
}

float __randf_range(inout uint seed, float from, float to) {
	return __rand_from_seed(seed) * (to - from) + from;
}

vec2 __randv2_range(inout uint seed, vec2 from, vec2 to) {
	return vec2(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y));
}

vec3 __randv3_range(inout uint seed, vec3 from, vec3 to) {
	return vec3(__randf_range(seed, from.x, to.x), __randf_range(seed, from.y, to.y), __randf_range(seed, from.z, to.z));
}

uint __hash(uint x) {
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = ((x >> uint(16)) ^ x) * uint(73244475);
	x = (x >> uint(16)) ^ x;
	return x;
}

mat3 __build_rotation_mat3(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat3(vec3(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s), vec3(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s), vec3(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c));
}

mat4 __build_rotation_mat4(vec3 axis, float angle) {
	axis = normalize(axis);
	float s = sin(angle);
	float c = cos(angle);
	float oc = 1.0 - c;
	return mat4(vec4(oc * axis.x * axis.x + c, oc * axis.x * axis.y - axis.z * s, oc * axis.z * axis.x + axis.y * s, 0), vec4(oc * axis.x * axis.y + axis.z * s, oc * axis.y * axis.y + c, oc * axis.y * axis.z - axis.x * s, 0), vec4(oc * axis.z * axis.x - axis.y * s, oc * axis.y * axis.z + axis.x * s, oc * axis.z * axis.z + c, 0), vec4(0, 0, 0, 1));
}

vec2 __get_random_unit_vec2(inout uint seed) {
	return normalize(vec2(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

vec3 __get_random_unit_vec3(inout uint seed) {
	return normalize(vec3(__rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed), __rand_from_seed_m1_p1(seed)));
}

void start() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);
	vec3 __diff = TRANSFORM[3].xyz - EMISSION_TRANSFORM[3].xyz;
	float __radians;
	vec3 __vec3_buff1;
	vec3 __vec3_buff2;
	float __scalar_buff1;
	float __scalar_buff2;
	int __scalar_ibuff;
	vec4 __vec4_buff;
	vec3 __ndiff = normalize(__diff);

	{
// Vector3Constant:6
		vec3 n_out6p0 = vec3(0.000000, 0.000000, 1.000000);


// Input:2
		vec3 n_out2p0 = VELOCITY;


// VectorDecompose:5
		float n_out5p0 = n_out2p0.x;
		float n_out5p1 = n_out2p0.y;
		float n_out5p2 = n_out2p0.z;


// VectorCompose:4
		vec2 n_out4p0 = vec2(n_out5p0, n_out5p1);


// VectorFunc:3
		vec2 n_out3p0 = radians(n_out4p0);


// StartOutput:0
		if (RESTART_POSITION) {
			TRANSFORM = mat4(vec4(1.0, 0.0, 0.0, 0.0), vec4(0.0, 1.0, 0.0, 0.0), vec4(0.0, 0.0, 1.0, 0.0), vec4(0.0, 0.0, 0.0, 1.0));
			if (RESTART_VELOCITY) {
				VELOCITY = (EMISSION_TRANSFORM * vec4(VELOCITY, 0.0)).xyz;
			}
			TRANSFORM = EMISSION_TRANSFORM * TRANSFORM;
		}
		TRANSFORM *= __build_rotation_mat4(n_out6p0, n_out3p0.x);


	}
	
	{

	}
}

void process() {
	uint __seed = __hash(NUMBER + uint(1) + RANDOM_SEED);
	vec3 __vec3_buff1;
	vec3 __diff = TRANSFORM[3].xyz - EMISSION_TRANSFORM[3].xyz;
	vec3 __ndiff = normalize(__diff);

	{
		if (COLLIDED) {


		} else {


		}
	}
	{


	}
}

"
graph_offset = Vector2(-248.583, -48.2684)
mode = 2
flags/collision_use_scale = false
flags/disable_force = false
flags/disable_velocity = false
flags/keep_data = false
nodes/start/2/node = SubResource("VisualShaderNodeInput_t8mlj")
nodes/start/2/position = Vector2(-580, 180)
nodes/start/3/node = SubResource("VisualShaderNodeVectorFunc_r656h")
nodes/start/3/position = Vector2(180, 220)
nodes/start/4/node = SubResource("VisualShaderNodeVectorCompose_e7w4n")
nodes/start/4/position = Vector2(-20, 260)
nodes/start/5/node = SubResource("VisualShaderNodeVectorDecompose_ldufy")
nodes/start/5/position = Vector2(-260, 240)
nodes/start/6/node = SubResource("VisualShaderNodeVec3Constant_ql3us")
nodes/start/6/position = Vector2(20, 100)
nodes/start/connections = PackedInt32Array(3, 0, 0, 7, 4, 0, 3, 0, 2, 0, 5, 0, 5, 0, 4, 0, 5, 1, 4, 1, 6, 0, 0, 6)
nodes/process_custom/0/position = Vector2(380, 160)
nodes/process_custom/2/node = SubResource("VisualShaderNodeVectorCompose_k8vpi")
nodes/process_custom/2/position = Vector2(140, 120)
nodes/process_custom/3/node = SubResource("VisualShaderNodeVectorFunc_c5fvh")
nodes/process_custom/3/position = Vector2(-80, 100)
nodes/process_custom/4/node = SubResource("VisualShaderNodeVectorCompose_dpe3a")
nodes/process_custom/4/position = Vector2(-260, 120)
nodes/process_custom/5/node = SubResource("VisualShaderNodeVectorDecompose_mx8i7")
nodes/process_custom/5/position = Vector2(-480, 120)
nodes/process_custom/6/node = SubResource("VisualShaderNodeInput_67r6c")
nodes/process_custom/6/position = Vector2(-800, 120)
nodes/process_custom/connections = PackedInt32Array(3, 0, 2, 0, 4, 0, 3, 0, 5, 0, 4, 0, 5, 1, 4, 1, 6, 0, 5, 0)
