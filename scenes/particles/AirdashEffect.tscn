[gd_scene load_steps=15 format=2]

[ext_resource path="res://assets/herochar_jump_up_anim_strip_3.png" type="Texture" id=1]

[sub_resource type="VisualShaderNodeInput" id=1]
input_name = "uv"

[sub_resource type="VisualShaderNodeTexture" id=2]
output_port_for_preview = 1
source = 2

[sub_resource type="VisualShaderNodeInput" id=3]
input_name = "alpha"

[sub_resource type="VisualShaderNodeScalarOp" id=4]
operator = 1

[sub_resource type="VisualShaderNodeScalarClamp" id=5]

[sub_resource type="VisualShaderNodeScalarOp" id=6]
default_input_values = [ 0, 0.0, 1, -1.0 ]
operator = 2

[sub_resource type="VisualShaderNodeScalarOp" id=7]
default_input_values = [ 0, 0.0, 1, 1.0 ]

[sub_resource type="VisualShaderNodeBooleanUniform" id=8]
uniform_name = "flip"

[sub_resource type="VisualShaderNodeExpression" id=9]
size = Vector2( 514, 280 )
expression = "if(flip) {
	output0 = vec3(1.0 - input0.x, input0.y, 0.0);
} else {
	output0 = input0;
} "

[sub_resource type="VisualShader" id=10]
code = "shader_type canvas_item;
uniform bool flip;



void vertex() {
// Output:0

}

void fragment() {
// Input:3
	float n_out3p0 = COLOR.a;

// Input:10
	vec3 n_out10p0 = vec3(UV, 0.0);

// BooleanUniform:8
	bool n_out8p0 = flip;

// Expression:9
	vec3 n_out9p0;
	n_out9p0 = vec3(0.0, 0.0, 0.0);
	{
		if(n_out8p0) {
			n_out9p0 = vec3(1.0 - n_out10p0.x, n_out10p0.y, 0.0);
		} else {
			n_out9p0 = n_out10p0;
		} 
	}

// Texture:2
	vec3 n_out2p0;
	float n_out2p1;
	{
		vec4 _tex_read = texture(TEXTURE, n_out9p0.xy);
		n_out2p0 = _tex_read.rgb;
		n_out2p1 = _tex_read.a;
	}

// ScalarOp:6
	float n_in6p1 = -1.00000;
	float n_out6p0 = n_out2p1 * n_in6p1;

// ScalarOp:7
	float n_in7p1 = 1.00000;
	float n_out7p0 = n_out6p0 + n_in7p1;

// ScalarOp:4
	float n_out4p0 = n_out3p0 - n_out7p0;

// ScalarClamp:5
	float n_in5p1 = 0.00000;
	float n_in5p2 = 1.00000;
	float n_out5p0 = clamp(n_out4p0, n_in5p1, n_in5p2);

// Output:0
	COLOR.a = n_out5p0;

}

void light() {
// Output:0

}
"
graph_offset = Vector2( -727, 137 )
mode = 1
flags/light_only = false
nodes/fragment/2/node = SubResource( 2 )
nodes/fragment/2/position = Vector2( -700, 120 )
nodes/fragment/3/node = SubResource( 3 )
nodes/fragment/3/position = Vector2( -360, 300 )
nodes/fragment/4/node = SubResource( 4 )
nodes/fragment/4/position = Vector2( 0, 200 )
nodes/fragment/5/node = SubResource( 5 )
nodes/fragment/5/position = Vector2( 180, 220 )
nodes/fragment/6/node = SubResource( 6 )
nodes/fragment/6/position = Vector2( -360, 120 )
nodes/fragment/7/node = SubResource( 7 )
nodes/fragment/7/position = Vector2( -200, 120 )
nodes/fragment/8/node = SubResource( 8 )
nodes/fragment/8/position = Vector2( -940, 480 )
nodes/fragment/9/node = SubResource( 9 )
nodes/fragment/9/position = Vector2( -740, 380 )
nodes/fragment/9/size = Vector2( 514, 280 )
nodes/fragment/9/input_ports = "0,1,input0;1,2,flip;"
nodes/fragment/9/output_ports = "0,1,output0;"
nodes/fragment/9/expression = "if(flip) {
	output0 = vec3(1.0 - input0.x, input0.y, 0.0);
} else {
	output0 = input0;
} "
nodes/fragment/10/node = SubResource( 1 )
nodes/fragment/10/position = Vector2( -900, 400 )
nodes/fragment/connections = PoolIntArray( 3, 0, 4, 0, 4, 0, 5, 0, 5, 0, 0, 1, 2, 1, 6, 0, 6, 0, 7, 0, 7, 0, 4, 1, 8, 0, 9, 1, 10, 0, 9, 0, 9, 0, 2, 0 )

[sub_resource type="ShaderMaterial" id=11]
shader = SubResource( 10 )
shader_param/flip = false

[sub_resource type="AtlasTexture" id=12]
atlas = ExtResource( 1 )
region = Rect2( 0, 0, 16, 16 )

[sub_resource type="Gradient" id=13]
offsets = PoolRealArray( 0.00606061, 1 )
colors = PoolColorArray( 0.5, 0.5, 0.5, 0.44, 0.5, 0.5, 0.5, 0 )

[node name="AirdashParticles" type="CPUParticles2D"]
material = SubResource( 11 )
z_index = -1
emitting = false
amount = 15
one_shot = true
speed_scale = 2.0
fixed_fps = 60
local_coords = false
texture = SubResource( 12 )
gravity = Vector2( 0, 10 )
scale_amount = 4.0
color_ramp = SubResource( 13 )
